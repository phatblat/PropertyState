/*
 * Example of using Gradle [PropertyState](https://docs.gradle.org/4.0/javadoc/org/gradle/api/provider/PropertyState.html)
 * added in 4.0. Code sample taken from:
 * https://docs.gradle.org/4.0/release-notes.html#public-type-for-representing-lazily-evaluated-properties
 */

apply plugin: GreetingPlugin

greeting {
    // Message set during configuration phase
    message = 'Hi from Gradle'
    outputFiles = files 'a.txt', 'b.txt'
}

// Show the contents of outputFiles
hello {
    doFirst {
        // Message changed on extension during execution phase, but before task action runs
        project.greeting.message = 'Hello from the execution phase!'
    }
    doLast {
        // Changed again, after printing
        project.greeting.message = 'Changed again in doLast'
        outputFiles.each { file ->
            println "${file.name}: ${file.text}"
        }
    }
}

class GreetingPlugin implements Plugin<Project> {
    void apply(Project project) {
        // Add the 'greeting' extension object
        def extension = project.extensions.create('greeting', GreetingPluginExtension, project)
        // Add a task that uses the configuration
        project.tasks.create('hello', Greeting) {
            message = extension.messageProvider
            outputFiles = extension.outputFiles
        }
    }
}

class GreetingPluginExtension {
    final PropertyState<String> message
    final ConfigurableFileCollection outputFiles

    GreetingPluginExtension(Project project) {
        message = project.property(String)
        setMessage('Hello from GreetingPlugin')
        outputFiles = project.files()
    }

    String getMessage() {
        message.get()
    }

    Provider<String> getMessageProvider() {
        message
    }

    void setMessage(String message) {
        this.message.set(message)
    }

    FileCollection getOutputFiles() {
        outputFiles
    }

    void setOutputFiles(FileCollection outputFiles) {
        this.outputFiles.setFrom(outputFiles)
    }
}

class Greeting extends DefaultTask {
    final PropertyState<String> message = project.property(String)
    final ConfigurableFileCollection outputFiles = project.files()

    @Input
    String getMessage() {
        message.get()
    }

    void setMessage(String message) {
        this.message.set(message)
    }

    void setMessage(Provider<String> message) {
        this.message.set(message)
    }

    FileCollection getOutputFiles() {
        outputFiles
    }

    void setOutputFiles(FileCollection outputFiles) {
        this.outputFiles.setFrom(outputFiles)
    }

    @TaskAction
    void printMessage() {
        getOutputFiles().each {
            it.text = getMessage()
        }
    }
}

